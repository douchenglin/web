网络、网络状态码、网络攻击手段、网络层次结构、进程 线程、内存管理、es6基础、浏览器、宏任务和微任务

网络层次结构：
1、物理层
2、数据链路层
3、网络层：这层对端到端的包传输进行定义，它定义了能够标识所有结点的逻辑地址，还定义了路由实现的方式和学习的方式。为了适应最大传输单元长度小于包长度的传输介质，网络层还定义了如何将一个包分解成更小的包的分段方法。示例：IP，IPX等
4、传输层：这层的功能包括是否选择差错恢复协议还是无差错恢复协议，及在同一主机上对不同应用的数据流的输入进行复用，还包括对收到的顺序不对的数据包的重新排序功能。示例：TCP，UDP，SPX。
5、会话层：它定义了如何开始、控制和结束一个会话，包括对多个双向消息的控制和管理，以便在只完成连续消息的一部分时可以通知应用，从而使表示层看到的数据是连续的，在某些情况下，如果表示层收到了所有的数据，则用数据代表表示层。示例：RPC，SQL等。
6、表示层：这一层的主要功能是定义数据格式及加密。示例：加密，ASCII等。
7、应用层：与其它计算机进行通讯的一个应用，它是对应应用程序的通信服务的。示例：HTTP。

UDP和TCP：两者都位于传输层
TCP
1、协议中包含了专门的传递保证机制，更加可靠
2、是面向连接的传输协议
UDP
1、不可靠
2、具有较好的实时性
3、是一种无连接的数据传输协议

长连接和短连接
长连接，指在一个TCP连接上可以连续发送多个数据包，在TCP连接保持期间，如果没有数据包发送，需要双方发检测包以维持此连接，一般需要自己做在线维持（不发生RST包和四次挥手）。  连接→数据传输→保持连接(心跳)→数据传输→保持连接(心跳)→……→关闭连接（一个TCP连接通道多个读写通信）； 
短连接是指通信双方有数据交互时，就建立一个TCP连接，数据发送完成后，则断开此TCP连接（管理起来比较简单，存在的连接都是有用的连接，不需要额外的控制手段）； 连接→数据传输→关闭连接；

webSocket
readyState：
1、CONNECTING：值为0，表示正在连接。
2、OPEN：值为1，表示连接成功，可以通信了。
3、CLOSING：值为2，表示连接正在关闭。
4、CLOSED：值为3，表示连接已经关闭，或者打开连接失败。
var ws = new WebSocket("wss://echo.websocket.org");
ws.onopen = function(evt) { 
  console.log("Connection open ..."); 
  ws.send("Hello WebSockets!");
};
ws.onmessage = function(evt) {
  console.log( "Received Message: " + evt.data);
  ws.close();
};
ws.onclose = function(evt) {
  console.log("Connection closed.");
};     

http和https
不使用TLS/SSL的HTTP通信，就是不加密的通信。所有信息明文传播，带来了三大风险。
（1） 窃听风险（eavesdropping）：第三方可以获知通信内容。
（2） 篡改风险（tampering）：第三方可以修改通信内容。
（3） 冒充风险（pretending）：第三方可以冒充他人身份参与通信。

https流程：
（1）客户端向服务器发起HTTPS请求，连接到服务器的443端口
（2）服务器端有一个密钥对，即公钥和私钥，是用来进行非对称加密使用的，服务器端保存着私钥，不能将其泄露，公钥可以发送给任何人。服务器将自己的公钥和证书发送给客户端。
（3）客户端收到服务器端的证书之后，会对证书进行检查，验证其合法性。有问题提示风险，无问题那么客户端会生成一个随机值，这个随机值就是用于进行对称加密的密钥，即客户端密钥。然后用服务器的公钥对客户端密钥进行非对称加密，这样客户端密钥就变成密文了
（4）客户端将加密之后的客户端密钥发送给服务器
（5）服务器接收到客户端发来的密文之后，会用自己的私钥对其进行非对称解密，解密之后的明文就是客户端密钥，然后用客户端密钥对数据进行对称加密，这样数据就变成了密文
（6）然后服务器将加密后的密文发送给客户端。
（7）客户端收到服务器发送来的密文，用客户端密钥对其进行对称解密，得到服务器发送的数据

TLS协议是为了解决这三大风险而设计的，希望达到：
（1） 所有信息都是加密传播，第三方无法窃听。
（2） 具有校验机制，一旦被篡改，通信双方会立刻发现。
（3） 配备身份证书，防止身份被冒充。
TLS协议的基本过程
（1） 客户端向服务器端索要并验证公钥。
（2） 双方协商生成"对话密钥"。
（3） 双方采用"对话密钥"进行加密通信。

常用网络攻击方式
DDOS分布式拒绝服务攻击：利用大量合法的分布式服务器对目标发送请求，从而导致正常合法用户无法获得服务
预防措施：
1、优化对外提供服务的主机
2、在系统中加装防火墙系统
3、优化路由及网络结构
4、安装入侵检测工具

XSS跨站脚本攻击： 通过对网页注入可执行代码且成功地被浏览器执行，达到攻击的目的
预防措施：
1、不要在允许位置插入不可信数据
2、对插入的数据进行解码

CSRF跨站请求伪造攻击：1.登录受信任网站A，并在本地生成Cookie。 2.在不登出A的情况下，访问危险网站B。3.攻击者在网站B获得Cookie，并伪装成用户登录网站A经行操作
预防措施：
1、尽量使用POST请求，相对不容易破解
2、验证码  --每次提交都需要确认是否是人为操作，而非代码

Redux流程
用户通过界面组件 触发ActionCreator，携带Store中的旧State与Action 流向Reducer,Reducer返回新的state，并更新界面
三大原则: 单一数据源、State 是只读的、使用纯函数来修改state